% ORNsAsFracDiff.m
% ORNs as fractional differentiators
% 
% created by Srinivas Gorur-Shandilya at 10:20 , 09 April 2014. Contact me at http://srinivas.gs/contact/
% 
% This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. 
% To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.

% internal housekeeping: determine if being called by publish or not
calling_func = dbstack;
being_published = 0;
if ~isempty(calling_func)
	if find(strcmp('publish',{calling_func.name}))
		being_published = 1;
	end
end

load('/local-data/DA-paper/flickering-stim/data.mat')

%% ORNs as fractional differentiators
% Are ORNs fractional differentiators? The following figure shows a typical response of a neuron (ab3A) to flickering binary odor stimulus (top panel). Note the transient artefact at the end of every pulse that may be the effect of the electrical noise generated by valve switching. 

td = 3;
figure('outerposition',[0 0 1000 700],'PaperUnits','points','PaperSize',[1000 700]); hold on
subplot(2,1,1), hold on
plot(data(td).time,data(td).PID)
ylabel('Stimulus (V)')
set(gca,'XLim',[15 20])
subplot(2,1,2), hold on
plot(data(td).time,data(td).ORN)
xlabel('Time (s)')
ylabel('Firing Rate (Hz)')
set(gca,'XLim',[15 20])

PrettyFig;
if being_published
	snapnow
	delete(gcf)
end

%%
% We can fit a fractional differentiator to this data set, and compare it to a LN model: 

if ~being_published
	[alpha,d,fd_pred] = FitFractionalDModel(data(td).PID,data(td).ORN);
	fd_pred = fd_pred*mean(data(td).ORN);
end


% build a simple linear model
[data(td).K,~,filtertime] = FindBestFilter(data(td).PID(500:end),data(td).ORN(500:end),[],'filter_length=201;');
data(td).filtertime = filtertime*mean(diff(data(td).time));
data(td).LinearFit = convolve(data(td).time,data(td).PID,data(td).K,data(td).filtertime);
data(td).LinearFit = data(td).LinearFit + mean(data(td).ORN);

xdata = data(td).LinearFit;
ydata = data(td).ORN;

% crop it to lose NaNs
ydata(isnan(xdata)) = [];
xdata(isnan(xdata)) = [];

xdata = xdata(:);
ydata = ydata(:);

fo=optimset('MaxFunEvals',1000,'Display','none');
x = lsqcurvefit(@hill,[max(ydata) 2 2],xdata,ydata,[max(ydata)/2 2 1],[2*max(ydata) max(ydata) 10],fo);
% save this for later
LN_pred = hill(x,data(td).LinearFit);

figure('outerposition',[0 0 1000 500],'PaperUnits','points','PaperSize',[1000 500]); hold on
plot(data(td).time,data(td).ORN,'k')
plot(data(td).time,fd_pred)
plot(data(td).time,LN_pred)
set(gca,'XLim',[15 20],'YLim',[-5 1.1*max(data(td).ORN)])
xlabel('Time (s)')
ylabel('Firing rate (Hz)')
legend({'Data','Frac. Diff.','LN Model'})
PrettyFig;
if being_published
	snapnow
	delete(gcf)
end


%%
% We see that the fractional differentiator is responding strongly to the transient artefact of the valve switching, which may affect the choice of order of fractional differentiation. To work around this, we sand the artefacts on the PID down:

figure('outerposition',[0 0 1000 500],'PaperUnits','points','PaperSize',[1000 500]); hold on
plot(data(td).time,data(td).PID,'k')
data = SandPIDArtifacts(data,td);
plot(data(td).time,data(td).PID2,'r')
legend({'Original Data','Artifacts removed'})
set(gca,'XLim',[15 20])
xlabel('Time (s)')
ylabel('Stimulus (V)')
PrettyFig;
if being_published
	snapnow
	delete(gcf)
end

%%
% We now recompute the best order of a fractional differentiator and fit the data. To keep the comparison fair, we also recompute the LN model using the artifact-free PID trace. 

% build a simple linear model
[data(td).K,~,filtertime] = FindBestFilter(data(td).PID2(500:end),data(td).ORN(500:end),[],'filter_length=201;');
data(td).filtertime = filtertime*mean(diff(data(td).time));
data(td).LinearFit = convolve(data(td).time,data(td).PID2,data(td).K,data(td).filtertime);
data(td).LinearFit = data(td).LinearFit + mean(data(td).ORN);

xdata = data(td).LinearFit;
ydata = data(td).ORN;

% crop it to lose NaNs
ydata(isnan(xdata)) = [];
xdata(isnan(xdata)) = [];

xdata = xdata(:);
ydata = ydata(:);

fo=optimset('MaxFunEvals',1000,'Display','none');
x = lsqcurvefit(@hill,[max(ydata) 2 2],xdata,ydata,[max(ydata)/2 2 1],[2*max(ydata) max(ydata) 10],fo);
% save this for later
LN_pred = hill(x,data(td).LinearFit);

if ~being_published
	[~,~,fd_pred2] = FitFractionalDModel(data(td).PID2,data(td).ORN);
	fd_pred2 = fd_pred2*mean(data(td).ORN);
end

figure('outerposition',[0 0 1000 500],'PaperUnits','points','PaperSize',[1000 500]); hold on
plot(data(td).time,data(td).ORN,'k')
plot(data(td).time,fd_pred2)
plot(data(td).time,LN_pred)
legend({'Data','Frac. Diff.','LN Model'})
set(gca,'XLim',[15 20],'YLim',[-5 1.1*max(data(td).ORN)])
xlabel('Time (s)')
ylabel('Firing Rate (Hz) (V)')

PrettyFig;
if being_published
	snapnow
	delete(gcf)
end

%% 
% Note that the output of the fractional differentiation operation is only rescaled by the mean and thresholded to throw out negative values. There is no additional output non-linearity as in the LN model. 

%%
% The rsquare of the LN model is:

disp(rsquare(LN_pred,data(td).ORN))

%%
% cf. the rsquare of the fractional diffentiator:

disp(rsquare(fd_pred2r,data(td).ORN))


