% 
% 
% created by Srinivas Gorur-Shandilya at 2:25 , 17 November 2014. Contact me at http://srinivas.gs/contact/
% 
% This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. 
% To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.

calling_func = dbstack;
being_published = 0;
if ~isempty(calling_func)
	if find(strcmp('publish',{calling_func.name}))
		being_published = 1;
	end
end



data_root = '/local-data/DA-paper/fast-flicker/orn/';
allfiles  = dir(strcat(data_root,'*.mat'));

% combine all data
if redo
	combined_data = ReduceORNData(data_root,allfiles);
end

%% How does changing the mean and variance of the stimulus and response affect the filters?
% In this document, we calculate filters and linear predictions for some gaussian distributed stimulus that drives a ORN. The response is the firing rate of the neuron. The different datasets are from different gaussian distributions generated by frozen noise with comparable variances but different means. 

%%
% The stimulus looks like this. Y axis is PID (V), and the x axis is time (s).

figure('outerposition',[0 0 1400 600],'PaperUnits','points','PaperSize',[1400 700]); hold on

for i = 1:length(paradigm_names)
	subplot(2,3,i), hold on
	plot_these=find(strcmp(paradigm_names{i}, combined_data.paradigm));
	this_pid = mean2(combined_data.PID(plot_these,:));
	time = 3e-3*(1:length(this_pid));
	time = time(a:z);
	this_pid = this_pid(a:z);
	set(gca,'XLim',[30 40])
	title(paradigm_names{i})
	plot(time,this_pid)
end
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end



%% 1) Direct Fit
% In this section, we find the best-fit filters, fit to the data directly. The following figures show the best fit predictions, together with the best-fit filters. In each plot, the black line is the actual response, and the red line is the linear prediction. The legend shows the r-square between the two. 

clear LNModel
LNModel.K = [];
LNModel.LinearFit = [];

for i = 1:length(paradigm_names)
	plot_these=find(strcmp(paradigm_names{i}, combined_data.paradigm));
	this_orn=mean2(combined_data.fA(:,plot_these));
	this_pid = mean2(combined_data.PID(plot_these,:));

	time = 3e-3*(1:length(this_orn));

	this_pid = this_pid(a:z);
	this_orn = this_orn(a:z);
	time = time(a:z);

	K = FitFilter2Data(this_pid,this_orn,[],'filter_length=299;');
	LinearFit = filter(K,1,this_pid-mean(this_pid)) + mean(this_orn);

	% save all of this for later
	LNModel(i).K = K;
	LNModel(i).LinearFit = LinearFit;
	LNModel(i).LinearFit_r2 = rsquare(LinearFit,this_orn);
	LNModel(i).this_orn = this_orn;
end


figure('outerposition',[0 0 1400 600],'PaperUnits','points','PaperSize',[1400 700]); hold on
for i = 1:6
	subplot(2,3,i), hold on
	this_orn = LNModel(i).this_orn;
	time = 3e-3*(1:length(this_orn));
	plot(time,this_orn,'k');
	time = 3e-3*(1:length(LNModel(i).LinearFit));
	lh=plot(time,LNModel(i).LinearFit,'r');
	set(gca,'XLim',[30 40])
	legend(lh,oval(LNModel(i).LinearFit_r2,2))
	title(paradigm_names{i})
end 
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end


figure('outerposition',[0 0 1000 500],'PaperUnits','points','PaperSize',[1000 700]); hold on
subplot(1,2,1), hold on
c = parula(length(LNModel));
for i = 1:length(LNModel)
	filtertime = 3e-3*(1:length(LNModel(i).K));
	plot(filtertime,LNModel(i).K,'Color',c(i,:))
end
xlabel('Filter Lag (s)')
ylabel('Filter Amplitude')
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end




%% 2) Zero-mean stimulus
% Now, we remove the mean from the stimulus and recalculate everything. 


clear LNModel
LNModel.K = [];
LNModel.LinearFit = [];

for i = 1:length(paradigm_names)
	plot_these=find(strcmp(paradigm_names{i}, combined_data.paradigm));
	this_orn=mean2(combined_data.fA(:,plot_these));
	this_pid = mean2(combined_data.PID(plot_these,:));


	time = 3e-3*(1:length(this_orn));

	this_pid = this_pid(a:z);
	this_orn = this_orn(a:z);
	time = time(a:z);

	this_pid = this_pid - mean(this_pid);

	K = FitFilter2Data(this_pid,this_orn,[],'filter_length=299;');
	LinearFit = filter(K,1,this_pid-mean(this_pid)) + mean(this_orn);

	% save all of this for later
	LNModel(i).K = K;
	LNModel(i).LinearFit = LinearFit;
	LNModel(i).LinearFit_r2 = rsquare(LinearFit,this_orn);
	LNModel(i).this_orn = this_orn;
end


figure('outerposition',[0 0 1400 600],'PaperUnits','points','PaperSize',[1400 700]); hold on
for i = 1:6
	subplot(2,3,i), hold on
	this_orn = LNModel(i).this_orn;
	time = 3e-3*(1:length(this_orn));
	plot(time,this_orn,'k');
	time = 3e-3*(1:length(LNModel(i).LinearFit));
	lh=plot(time,LNModel(i).LinearFit,'r');
	set(gca,'XLim',[30 40])
	legend(lh,oval(LNModel(i).LinearFit_r2,2))
	title(paradigm_names{i})
end 
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end


figure('outerposition',[0 0 1000 500],'PaperUnits','points','PaperSize',[1000 700]); hold on
subplot(1,2,1), hold on
c = parula(length(LNModel));
for i = 1:length(LNModel)
	filtertime = 3e-3*(1:length(LNModel(i).K));
	plot(filtertime,LNModel(i).K,'Color',c(i,:))
end
xlabel('Filter Lag (s)')
ylabel('Filter Amplitude')
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end

%% 3) Zero mean, unit variance stimulus
% In this section, in addition to removing the mean, we also divide the stimulus by the standard deviation and recompute everything. 


clear LNModel
LNModel.K = [];
LNModel.LinearFit = [];

for i = 1:length(paradigm_names)
	plot_these=find(strcmp(paradigm_names{i}, combined_data.paradigm));
	this_orn=mean2(combined_data.fA(:,plot_these));
	this_pid = mean2(combined_data.PID(plot_these,:));


	time = 3e-3*(1:length(this_orn));

	this_pid = this_pid(a:z);
	this_orn = this_orn(a:z);
	time = time(a:z);

	this_pid = this_pid - mean(this_pid);
	this_pid = this_pid/std(this_pid);

	K = FitFilter2Data(this_pid,this_orn,[],'filter_length=299;');
	LinearFit = filter(K,1,this_pid-mean(this_pid)) + mean(this_orn);

	% save all of this for later
	LNModel(i).K = K;
	LNModel(i).LinearFit = LinearFit;
	LNModel(i).LinearFit_r2 = rsquare(LinearFit,this_orn);
	LNModel(i).this_orn = this_orn;
end


figure('outerposition',[0 0 1400 600],'PaperUnits','points','PaperSize',[1400 700]); hold on
for i = 1:6
	subplot(2,3,i), hold on
	this_orn = LNModel(i).this_orn;
	time = 3e-3*(1:length(this_orn));
	plot(time,this_orn,'k');
	time = 3e-3*(1:length(LNModel(i).LinearFit));
	lh=plot(time,LNModel(i).LinearFit,'r');
	set(gca,'XLim',[30 40])
	legend(lh,oval(LNModel(i).LinearFit_r2,2))
	title(paradigm_names{i})
end 
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end


figure('outerposition',[0 0 1000 500],'PaperUnits','points','PaperSize',[1000 700]); hold on
subplot(1,2,1), hold on
c = parula(length(LNModel));
for i = 1:length(LNModel)
	filtertime = 3e-3*(1:length(LNModel(i).K));
	plot(filtertime,LNModel(i).K,'Color',c(i,:))
end
xlabel('Filter Lag (s)')
ylabel('Filter Amplitude')
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end

%% 4) Zero Mean Stimulus and Response
% In this section, we remove the mean from the stimulus and the response, but don't do anything else. 



clear LNModel
LNModel.K = [];
LNModel.LinearFit = [];

for i = 1:length(paradigm_names)
	plot_these=find(strcmp(paradigm_names{i}, combined_data.paradigm));
	this_orn=mean2(combined_data.fA(:,plot_these));
	this_pid = mean2(combined_data.PID(plot_these,:));


	time = 3e-3*(1:length(this_orn));

	this_pid = this_pid(a:z);
	this_orn = this_orn(a:z);
	time = time(a:z);

	this_pid = this_pid - mean(this_pid);
	this_orn = this_orn - mean(this_orn);

	K = FitFilter2Data(this_pid,this_orn,[],'filter_length=299;');
	LinearFit = filter(K,1,this_pid-mean(this_pid)) + mean(this_orn);

	% save all of this for later
	LNModel(i).K = K;
	LNModel(i).LinearFit = LinearFit;
	LNModel(i).LinearFit_r2 = rsquare(LinearFit,this_orn);
	LNModel(i).this_orn = this_orn;
end


figure('outerposition',[0 0 1400 600],'PaperUnits','points','PaperSize',[1400 700]); hold on
for i = 1:6
	subplot(2,3,i), hold on
	this_orn = LNModel(i).this_orn;
	time = 3e-3*(1:length(this_orn));
	plot(time,this_orn,'k');
	time = 3e-3*(1:length(LNModel(i).LinearFit));
	lh=plot(time,LNModel(i).LinearFit,'r');
	set(gca,'XLim',[30 40])
	legend(lh,oval(LNModel(i).LinearFit_r2,2))
	title(paradigm_names{i})
end 
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end


figure('outerposition',[0 0 1000 500],'PaperUnits','points','PaperSize',[1000 700]); hold on
subplot(1,2,1), hold on
c = parula(length(LNModel));
for i = 1:length(LNModel)
	filtertime = 3e-3*(1:length(LNModel(i).K));
	plot(filtertime,LNModel(i).K,'Color',c(i,:))
end
xlabel('Filter Lag (s)')
ylabel('Filter Amplitude')
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end

%% 5) Zero Mean, Unit variance Stimulus and response
% in this section, we remove the mean from the stimulus and the response, and then divide each by its standard deviation. 

clear LNModel
LNModel.K = [];
LNModel.LinearFit = [];

for i = 1:length(paradigm_names)
	plot_these=find(strcmp(paradigm_names{i}, combined_data.paradigm));
	this_orn=mean2(combined_data.fA(:,plot_these));
	this_pid = mean2(combined_data.PID(plot_these,:));


	time = 3e-3*(1:length(this_orn));

	this_pid = this_pid(a:z);
	this_orn = this_orn(a:z);
	time = time(a:z);

	this_pid = this_pid - mean(this_pid);
	this_pid = this_pid/std(this_pid);
	this_orn = this_orn - mean(this_orn);
	this_orn = this_orn/std(this_orn);

	K = FitFilter2Data(this_pid,this_orn,[],'filter_length=299;');
	LinearFit = filter(K,1,this_pid-mean(this_pid)) + mean(this_orn);

	% save all of this for later
	LNModel(i).K = K;
	LNModel(i).LinearFit = LinearFit;
	LNModel(i).LinearFit_r2 = rsquare(LinearFit,this_orn);
	LNModel(i).this_orn = this_orn;
end


figure('outerposition',[0 0 1400 600],'PaperUnits','points','PaperSize',[1400 700]); hold on
for i = 1:6
	subplot(2,3,i), hold on
	this_orn = LNModel(i).this_orn;
	time = 3e-3*(1:length(this_orn));
	plot(time,this_orn,'k');
	time = 3e-3*(1:length(LNModel(i).LinearFit));
	lh=plot(time,LNModel(i).LinearFit,'r');
	set(gca,'XLim',[30 40])
	legend(lh,oval(LNModel(i).LinearFit_r2,2))
	title(paradigm_names{i})
end 
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end


figure('outerposition',[0 0 1000 500],'PaperUnits','points','PaperSize',[1000 700]); hold on
subplot(1,2,1), hold on
c = parula(length(LNModel));
for i = 1:length(LNModel)
	filtertime = 3e-3*(1:length(LNModel(i).K));
	plot(filtertime,LNModel(i).K,'Color',c(i,:))
end
xlabel('Filter Lag (s)')
ylabel('Filter Amplitude')
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end

%% 6) Normalised Variance Only
% In this section, we only divide by the standard deviation (both stimulus and response), but keep the means. 

clear LNModel
LNModel.K = [];
LNModel.LinearFit = [];

for i = 1:length(paradigm_names)
	plot_these=find(strcmp(paradigm_names{i}, combined_data.paradigm));
	this_orn=mean2(combined_data.fA(:,plot_these));
	this_pid = mean2(combined_data.PID(plot_these,:));


	time = 3e-3*(1:length(this_orn));

	this_pid = this_pid(a:z);
	this_orn = this_orn(a:z);
	time = time(a:z);

	this_pid = this_pid/std(this_pid);
	this_orn = this_orn/std(this_orn);

	K = FitFilter2Data(this_pid,this_orn,[],'filter_length=299;');
	LinearFit = filter(K,1,this_pid-mean(this_pid)) + mean(this_orn);

	% save all of this for later
	LNModel(i).K = K;
	LNModel(i).LinearFit = LinearFit;
	LNModel(i).LinearFit_r2 = rsquare(LinearFit,this_orn);
	LNModel(i).this_orn = this_orn;
end


figure('outerposition',[0 0 1400 600],'PaperUnits','points','PaperSize',[1400 700]); hold on
for i = 1:6
	subplot(2,3,i), hold on
	this_orn = LNModel(i).this_orn;
	time = 3e-3*(1:length(this_orn));
	plot(time,this_orn,'k');
	time = 3e-3*(1:length(LNModel(i).LinearFit));
	lh=plot(time,LNModel(i).LinearFit,'r');
	set(gca,'XLim',[30 40])
	legend(lh,oval(LNModel(i).LinearFit_r2,2))
	title(paradigm_names{i})
end 
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end


figure('outerposition',[0 0 1000 500],'PaperUnits','points','PaperSize',[1000 500]); hold on
subplot(1,2,1), hold on
c = parula(length(LNModel));
for i = 1:length(LNModel)
	filtertime = 3e-3*(1:length(LNModel(i).K));
	plot(filtertime,LNModel(i).K,'Color',c(i,:))
end
xlabel('Filter Lag (s)')
ylabel('Filter Amplitude')
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end

%% 7) Carlotta's Data: Direct Fit
% Now we do the same thing with Carlotta's data. First we compute the filter directly, then divide by the standard deviation and redo. For a fair comparison, the linear output is passed through a rectifier (negative values are set to zero)

load('/local-data/DA-paper/flickering-stim/data.mat')

clear LNModel
LNModel.K = [];
LNModel.LinearFit = [];

for i = 1:length(paradigm_names)
	plot_these=i+1;
	this_orn=data(plot_these).ORN;
	this_pid = data(plot_these).PID;

	time = 3e-3*(1:length(this_orn));


	K = FitFilter2Data(this_pid,this_orn,[],'filter_length=299;');
	LinearFit = filter(K,1,this_pid-mean(this_pid)) + mean(this_orn);
	LinearFit(LinearFit<0)=0;

	% save all of this for later
	LNModel(i).K = K;
	LNModel(i).LinearFit = LinearFit;
	LNModel(i).LinearFit_r2 = rsquare(LinearFit,this_orn);
	LNModel(i).this_orn = this_orn;
end

figure('outerposition',[0 0 1400 600],'PaperUnits','points','PaperSize',[1400 700]); hold on
for i = 1:6
	subplot(2,3,i), hold on
	this_orn = LNModel(i).this_orn;
	time = 3e-3*(1:length(this_orn));
	plot(time,this_orn,'k');
	time = 3e-3*(1:length(LNModel(i).LinearFit));
	lh=plot(time,LNModel(i).LinearFit,'r');
	set(gca,'XLim',[10 20])
	legend(lh,oval(LNModel(i).LinearFit_r2,2))
	title(data(i+1).odor)
end 
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end


figure('outerposition',[0 0 1000 500],'PaperUnits','points','PaperSize',[1000 500]); hold on
subplot(1,2,1), hold on
c = parula(length(LNModel));
for i = 1:length(LNModel)
	filtertime = 3e-3*(1:length(LNModel(i).K));
	plot(filtertime,LNModel(i).K,'Color',c(i,:))
end
xlabel('Filter Lag (s)')
ylabel('Filter Amplitude')
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end

%% 8) Carlotta's Data: Division by Std. Dev.
% Here we divide the stimulus and the response by standard deviation and repeat the analysis. 

clear LNModel
LNModel.K = [];
LNModel.LinearFit = [];

for i = 1:length(paradigm_names)
	plot_these=i+1;
	this_orn=data(plot_these).ORN;
	this_pid = data(plot_these).PID;

	time = 3e-3*(1:length(this_orn));


	this_pid = this_pid/std(this_pid);
	this_orn = this_orn/std(this_orn);

	K = FitFilter2Data(this_pid,this_orn,[],'filter_length=299;');
	LinearFit = filter(K,1,this_pid-mean(this_pid)) + mean(this_orn);
	LinearFit(LinearFit<0)=0;

	% save all of this for later
	LNModel(i).K = K;
	LNModel(i).LinearFit = LinearFit;
	LNModel(i).LinearFit_r2 = rsquare(LinearFit,this_orn);
	LNModel(i).this_orn = this_orn;
end

figure('outerposition',[0 0 1400 600],'PaperUnits','points','PaperSize',[1400 700]); hold on
for i = 1:6
	subplot(2,3,i), hold on
	this_orn = LNModel(i).this_orn;
	time = 3e-3*(1:length(this_orn));
	plot(time,this_orn,'k');
	time = 3e-3*(1:length(LNModel(i).LinearFit));
	lh=plot(time,LNModel(i).LinearFit,'r');
	set(gca,'XLim',[10 20])
	legend(lh,oval(LNModel(i).LinearFit_r2,2))
	title(data(i+1).odor)
end 
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end


figure('outerposition',[0 0 1000 500],'PaperUnits','points','PaperSize',[1000 500]); hold on
subplot(1,2,1), hold on
c = parula(length(LNModel));
for i = 1:length(LNModel)
	filtertime = 3e-3*(1:length(LNModel(i).K));
	plot(filtertime,LNModel(i).K,'Color',c(i,:))
end
xlabel('Filter Lag (s)')
ylabel('Filter Amplitude')
PrettyFig;


if being_published
	snapnow
	delete(gcf)
end


