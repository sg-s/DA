% 
% 
% created by Srinivas Gorur-Shandilya at 1:59 , 07 March 2016. Contact me at http://srinivas.gs/contact/
% 
% This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. 
% To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.


pHeader;

%% Dynamical Gain Control in ORNs
% In this figure, we show that ORNs adapt quickly to naturalistic stimuli in a stimulus-driven manner, and acts to decrease ORN gain following large stimuli and increase ORN gain following small stimuli. In the figure below, the first two panels show the ethyl acetate stimulus and the ORN response. 

%%
% We then extract a linear filter from the stimulus-response data, and use it to project the stimulus, obtaining a plot of firing rate vs. projected stimulus (bottom left). In this plot, every excursion in the ORN response (defined as deviations above 10% of the maximum response that are less than 500ms long) is plotted as a function of the projected stimulus. These excursions are colored as a function of the mean stimulus in the preceding 500ms: blue (yellow) indicates low (high) stimulus in the preceding 500ms. As we see from the plot, excursions following low stimuli (blue) occur with greater slope (or have a greater gain) that excursions following high stimuli (yellow). 

%%
% Can a static output nonlinearity account for the observed variation in apparent gain? To determine this, we fit a static Hill function (red line) to this data, and replot the firing rate as a function of the full LN model prediction (second plot in bottom row). Fitting a static nonlinearity accounts for an additional 8% of the variance. However, excursions in this space still occur with different slopes, and these different slopes appear to correlate with the mean stimulus in the preceding 500ms (steep excursions are blue, shallower excursions are yellow), suggesting that a static nonlinearity does not fully capture stimulus-driven gain changes. 

%%
% We hypothesize that the mean stimulus over some preceding window divisively affects the gain of the ORN, in an adaptive manner to amplify response following small stimuli and suppress responses following large stimuli. The DA model is one possible formulation of this hypothesis. Fitting a DA model to the ORN response accounts for an extra 10% of the variance over the LN model. Furthermore, excursions in this space occur with more similar slopes, and slopes no longer correlate with the mean stimulus in the preceding 500ms. To determine the timescale of dynamical gain control, we vary the timescale of gain control in the DA model, and determine how much of the remaining variance the DA model can account for. A peak close to ~200ms that is above the LN model (red line) suggests that this is the timescale of dynamical gain control. 


% load the data
if ~exist('od','var')
	p = '/local-data/DA-paper/natural-flickering/with-lfp/ab3/';
	od = raw2ORNData(p);
	% ignore all the LFP for now
	for i = 1:length(od)
		od(i).LFP = [];
	end

	% specify interesting range
	uts = zeros(length(od(1).stimulus),1);
	uts(10e3:end-5e3) = true;
	for i = 1:length(od)
		od(i).use_this_segment = uts;
	end

	% back out all filters
	od = backOutFilters(od);
end

figure('outerposition',[0 0 1500 800],'PaperUnits','points','PaperSize',[1500 800]); hold on
clear ax
ax(1) = subplot(2,2,1); hold on
ax(2) = subplot(2,2,2); hold on
for i = 3:6
	ax(i) = subplot(2,4,2+i); hold on
end

% show stimulus
t = (1:length(od(1).stimulus))*1e-3;
plot(ax(1),t,nanmean([od.stimulus],2),'k')
xlabel(ax(1),'Time (s)')
ylabel(ax(1),'Stimulus (V)')
set(ax(1),'XLim',[0 70])

% show response
for i = 1:length(od)
	plot(ax(2),t,nanmean([od(i).firing_rate],2),'Color',[0 0 0 0.1])
end
plot(ax(2),t,nanmean([od.firing_rate],2),'Color','k')
xlabel(ax(2),'Time (s)')
ylabel(ax(2),'Firing Rate (Hz)')
set(ax(2),'XLim',[0 70])


% do the analysis of fast gain control
example_data = od(2);
orn_data = ORNData;
orn_data.stimulus = nanmean(example_data.stimulus,2);
orn_data.firing_rate = nanmean(example_data.firing_rate,2);
stim_on = false(length(example_data.stimulus),1);
stim_on(10e3:end-5e3) = true; 
orn_data.use_this_segment = stim_on;

r2_plot_data = fastGainControlAnalysis(ax(3:end),orn_data,'recompute_DA_fit',false);

legend(r2_plot_data.l,['Peak = ' oval(r2_plot_data.peak_tau) 'ms'])
prettyFig('fs=18;','FixLogX=true;')

if being_published	
	snapnow	
	delete(gcf)
end


%% Controls
% In this section we establish controls for dynamical gain control. Negative controls are the LN model, which by definition cannot have gain control, and positive controls are the DA model, which does. In the following figure, the first row shows the same analysis as the previous figure with synthetic data generated by the LN model. We see that 1) there is no separation of excursions by slope, and that these slopes do not correlate with the mean stimulus in the preceding 500ms and 2) The DA model does not outperform the LN model. 

%%
% In contrast, in the second row, where we repeat this analysis with synthetic data from the DA model, we see excursions occurring with different slopes, and that shallower slopes are yelloe, and steeper slopes are blue. Fitting a LN model to this synthetic data does not account for this discrepancy, and here, a DA model does outperform the LN model, and the timescale of dynamical gain control reported here matches the parameters of the DA model used to generate the synthetic data. 

figure('outerposition',[0 0 1500 800],'PaperUnits','points','PaperSize',[1500 800]); hold on
clear ax
for i = 8:-1:1
	ax(i) = subplot(2,4,i); hold on
end



%        ##     ## ########     ######   #######  ##    ## ######## ########   #######  ##       
%        ##     ## ##          ##    ## ##     ## ###   ##    ##    ##     ## ##     ## ##       
%        ##     ## ##          ##       ##     ## ####  ##    ##    ##     ## ##     ## ##       
% ###### ##     ## ######      ##       ##     ## ## ## ##    ##    ########  ##     ## ##       
%         ##   ##  ##          ##       ##     ## ##  ####    ##    ##   ##   ##     ## ##       
%          ## ##   ##          ##    ## ##     ## ##   ###    ##    ##    ##  ##     ## ##       
%           ###    ########     ######   #######  ##    ##    ##    ##     ##  #######  ######## 


% use the LN model
control_data = ORNData;
q.   tau1 = 10;
q.   tau2 = 90.9375;
q.      A = 0.1484;
q.      n = 2;
q. offset = -0.0483;
q. Hill_A = 90.0547;
q.Hill_Kd = 0.6875;
q. Hill_n = 4;
[R,K] = pLNModel(orn_data.stimulus,q);
RandStream.setGlobalStream(RandStream('mt19937ar','Seed',1984)); 
R = R + randn(length(R),1);
R(R<0) = 0;
control_data.stimulus = orn_data.stimulus;
control_data.firing_rate = R;
control_data.use_this_segment = stim_on;
control_data.regularisation_factor = 1e-1;
control_data.filtertime_firing = 1e-3*(1:length(K));
control_data.K_firing = K;


% show response vs. linear projection; colour by mean stimulus in recent history window 
[~,excursions] = plotExcursions(control_data,ax(1),'data','firing_rate');

% make two time vectors, one defining when the stimulus is on, and one just for the whiffs
stim_on = false(length(example_data.stimulus),1);
stim_on(10e3:end-5e3) = true; 
whiff_times = false(length(example_data.stimulus),1);
for i = 1:length(excursions.ons)
	whiff_times(excursions.ons(i):excursions.offs(i)) = true;
end

% fit a NL just to the excursions
control_data.use_this_segment = whiff_times;
[control_data_LN,ff] = fitNL(control_data);

% show this best-fit NL on this plot
x = control_data.firing_projected(control_data.use_this_segment,:); 
plot(ax(1),sort(x),max(control_data.firing_rate(control_data.use_this_segment,:))*ff(sort(x)),'r')
xlabel(ax(1),'Proj. Stimulus (V)')
l = plot(ax(1),NaN,NaN);
linear_filter_r2 = rsquare(control_data.firing_projected(control_data.use_this_segment),control_data.firing_rate(control_data.use_this_segment));
legend(l,['r^2 = ' oval(linear_filter_r2)],'Location','southeast')


% show response vs. LN model; colour by mean stimulus in recent history window 
uts = false(length(example_data.stimulus),1);
uts(10e3:end-5e3) = true;
control_data_LN.use_this_segment = uts;
plotExcursions(control_data_LN,ax(2),'data','firing_rate');
xlabel(ax(2),'LN Model Prediction (Hz)')
l = plot(ax(2),NaN,NaN);
LN_model_r2 = rsquare(control_data_LN.firing_projected(whiff_times),control_data_LN.firing_rate(whiff_times));
legend(l,['r^2 = ' oval(LN_model_r2)],'Location','southeast')

% fit a DA model
clear p
p. s0 = -0.1809;
p.  n_z = 2;
p.tau_z = 160.2500;
p.  n_y = 2;
p.tau_y = 8.8490;
p.    C = 1.3916e-06;
p.    A = 224.4745;
p.    B = 0.2726;
S = control_data_LN.stimulus;
R = DAModelv2(S,p);
DA_model_data = control_data_LN;
DA_model_data.firing_projected = R;
plotExcursions(DA_model_data,ax(3),'data','firing_rate');
l = plot(ax(3),NaN,NaN);
DA_model_r2 = rsquare(R(whiff_times),control_data_LN.firing_rate(whiff_times));
legend(l,['r^2 = ' oval(DA_model_r2)],'Location','southeast');
xlabel(ax(3),'DA Model Prediction (Hz)')


% now show that this is the key timescale of gain control
tau_gain = round(logspace(log10(50),4,50));
r2 = NaN*tau_gain;
for i = 1:length(tau_gain)
	p.tau_z = tau_gain(i)/p.n_z;
	R = DAModelv2(S,p);
	r2(i) = rsquare(R(whiff_times),control_data_LN.firing_rate(whiff_times));
end

% convert into fraction remaining variance explained
r2 = (r2 - linear_filter_r2)./(1-linear_filter_r2);


plot(ax(4),tau_gain,r2,'k+')
set(ax(4),'XScale','log','YLim',[0 1])
xlabel(ax(4),'Timescale of gain control (ms)')
ylabel(ax(4),['Remaining variance' char(10) 'explained by DA model'])

% show where the LN model is on this plot
plot(ax(4),tau_gain,(LN_model_r2-linear_filter_r2)/(1-linear_filter_r2)*(1+0*tau_gain),'r')



%        ##     ## ########     ######   #######  ##    ## ######## ########   #######  ##       
%   ##   ##     ## ##          ##    ## ##     ## ###   ##    ##    ##     ## ##     ## ##       
%   ##   ##     ## ##          ##       ##     ## ####  ##    ##    ##     ## ##     ## ##       
% ###### ##     ## ######      ##       ##     ## ## ## ##    ##    ########  ##     ## ##       
%   ##    ##   ##  ##          ##       ##     ## ##  ####    ##    ##   ##   ##     ## ##       
%   ##     ## ##   ##          ##    ## ##     ## ##   ###    ##    ##    ##  ##     ## ##       
%           ###    ########     ######   #######  ##    ##    ##    ##     ##  #######  ######## 

% use the DA model
control_data = ORNData;
clear p
p.   s0 = -0.1164;
p.  n_z = 10.6250;
p.tau_z = 19.7499;
p.  n_y = 10.6250;
p.tau_y = 4.6377;
p.    C = 0.5848;
p.    A = 709.4439;
p.    B = 12.0094;
S = orn_data.stimulus;
R = DAModelv2(S,p);
RandStream.setGlobalStream(RandStream('mt19937ar','Seed',1984)); 
R = R + randn(length(R),1);
R(R<0) = 0;
control_data.stimulus = orn_data.stimulus;
control_data.firing_rate = R;
control_data.use_this_segment = stim_on;
control_data.regularisation_factor = 1e-1;

r2_plot_data = fastGainControlAnalysis(ax(5:8),control_data,'recompute_DA_fit',false);
legend(r2_plot_data.l,['Peak = ' oval(r2_plot_data.peak_tau) 'ms'])

for i = 1:4
	title(ax(i),'Synthetic Data: LN Model')
end
for i = 5:8
	title(ax(i),'Synthetic Data: DA Model')
end

prettyFig('fs=16;','FixLogX=true;')

if being_published	
	snapnow	
	delete(gcf)
end


%% Rescaling Time
% What's fishy about this is that the peak of the last plot is always at the same place. In the following figure, we manipulate time in two ways: first, we use a fixed DA model, and stretch the stimulus in time, to see if the estimated timescale of gain control changes (it shouldn't). Then, we change the timescale of gain control in the DA model, and see if we can recover this change in the analysis. 

figure('outerposition',[0 0 1500 800],'PaperUnits','points','PaperSize',[1500 800]); hold on
clear ax
for i = 8:-1:1
	ax(i) = subplot(2,4,i); hold on
end

%  ######   #######  ##     ## ########  ########  ########  ######   ######  
% ##    ## ##     ## ###   ### ##     ## ##     ## ##       ##    ## ##    ## 
% ##       ##     ## #### #### ##     ## ##     ## ##       ##       ##       
% ##       ##     ## ## ### ## ########  ########  ######    ######   ######  
% ##       ##     ## ##     ## ##        ##   ##   ##             ##       ## 
% ##    ## ##     ## ##     ## ##        ##    ##  ##       ##    ## ##    ## 
%  ######   #######  ##     ## ##        ##     ## ########  ######   ######  


S = nanmean(example_data.stimulus,2);
S = S(1:2:end); 

% use the DA model
control_data = ORNData;
clear p
p0.   s0 = -0.1164;
p0.  n_z = 10.6250;
p0.tau_z = 19.7499;
p0.  n_y = 10.6250;
p0.tau_y = 4.6377;
p0.    C = 0.5848;
p0.    A = 709.4439;
p0.    B = 12.0094;
R = DAModelv2(S,p0);
RandStream.setGlobalStream(RandStream('mt19937ar','Seed',1984)); 
R = R + randn(length(R),1);
R(R<0) = 0;
control_data.stimulus = S;
control_data.firing_rate = R;
control_data.use_this_segment = stim_on(1:2:end);
control_data.regularisation_factor = 1e-1;

r2_plot_data = fastGainControlAnalysis(ax(1:4),control_data,'recompute_DA_fit',false);
legend(r2_plot_data.l,['Peak = ' oval(r2_plot_data.peak_tau) 'ms, actual = ' oval(p0.tau_z*p0.n_z)])



%    ######  ######## ########  ######## ########  ######  ##     ## 
%   ##    ##    ##    ##     ## ##          ##    ##    ## ##     ## 
%   ##          ##    ##     ## ##          ##    ##       ##     ## 
%    ######     ##    ########  ######      ##    ##       ######### 
%         ##    ##    ##   ##   ##          ##    ##       ##     ## 
%   ##    ##    ##    ##    ##  ##          ##    ##    ## ##     ## 
%    ######     ##    ##     ## ########    ##     ######  ##     ## 

S = repmat(nanmean(example_data.stimulus,2),1,2)'; 
S = S(:);
stim_on_stretched = repmat(stim_on,1,2)';
stim_on_stretched = stim_on_stretched(:);

% use the DA model
control_data = ORNData;
clear p
p0.   s0 = -0.1164;
p0.  n_z = 10.6250;
p0.tau_z = 19.7499;
p0.  n_y = 10.6250;
p0.tau_y = 4.6377;
p0.    C = 0.5848;
p0.    A = 709.4439;
p0.    B = 12.0094;
R = DAModelv2(S,p0);
RandStream.setGlobalStream(RandStream('mt19937ar','Seed',1984)); 
R = R + randn(length(R),1);
R(R<0) = 0;
control_data.stimulus = S;
control_data.firing_rate = R;
control_data.use_this_segment = stim_on_stretched;
control_data.regularisation_factor = 1e-1;

r2_plot_data = fastGainControlAnalysis(ax(5:8),control_data,'recompute_DA_fit',false,'max_exc_length',1e3);
legend(r2_plot_data.l,['Peak = ' oval(r2_plot_data.peak_tau) 'ms, actual = ' oval(p0.tau_z*p0.n_z)])


for i = 1:4
	title(ax(i),'2X Compressed Stimulus')
end
for i = 5:8
	title(ax(i),'2X Stretched Stimulus')
end

prettyFig('fs=16;','FixLogX=true;')

if being_published	
	snapnow	
	delete(gcf)
end

%% Changing the timescale of gain control
% In this section, we change the timescale of gain control in the DA model, and see if we can recover this from the analysis. 

figure('outerposition',[0 0 1500 800],'PaperUnits','points','PaperSize',[1500 800]); hold on
clear ax
for i = 8:-1:1
	ax(i) = subplot(2,4,i); hold on
end

S = nanmean(example_data.stimulus,2);

% use the DA model
control_data = ORNData;
clear p0
p0.   s0 = -0.1164;
p0.  n_z = 10;
p0.tau_z = 20;
p0.  n_y = 10.6250;
p0.tau_y = 4.6377;
p0.    C = 0.5848;
p0.    A = 709.4439;
p0.    B = 12.0094;
R = DAModelv2(S,p0);
RandStream.setGlobalStream(RandStream('mt19937ar','Seed',1984)); 
R = R + randn(length(R),1);
R(R<0) = 0;
control_data.stimulus = S;
control_data.firing_rate = R;
control_data.use_this_segment = stim_on;
control_data.regularisation_factor = 1e-1;

r2_plot_data = fastGainControlAnalysis(ax(1:4),control_data,'recompute_DA_fit',false);
legend(r2_plot_data.l,['Peak = ' oval(r2_plot_data.peak_tau) 'ms, actual = ' oval(p0.tau_z*p0.n_z)])

% use the DA model
control_data = ORNData;
p0.  n_z = 10;
p0.tau_z = 40;
R = DAModelv2(S,p0);
RandStream.setGlobalStream(RandStream('mt19937ar','Seed',1984)); 
R = R + randn(length(R),1);
R(R<0) = 0;
control_data.stimulus = S;
control_data.firing_rate = R;
control_data.use_this_segment = stim_on;
control_data.regularisation_factor = 1e-1;

r2_plot_data = fastGainControlAnalysis(ax(5:8),control_data,'recompute_DA_fit',false,'max_exc_length',1e3);
legend(r2_plot_data.l,['Peak = ' oval(r2_plot_data.peak_tau) 'ms, actual = ' oval(p0.tau_z*p0.n_z)])

for i = 1:4
	title(ax(i),'200ms gain control')
end
for i = 5:8
	title(ax(i),'400ms gain control')
end

prettyFig('fs=16;','FixLogX=true;')

if being_published	
	snapnow	
	delete(gcf)
end

%% Version Info
%
pFooter;


