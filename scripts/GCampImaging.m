% GCampImaging.m
% 
% created by Srinivas Gorur-Shandilya at 5:55 , 03 December 2015. Contact me at http://srinivas.gs/contact/
% 
% This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. 
% To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.


% add homebrew path
path1 = getenv('PATH');
if isempty(strfind(path1,':/usr/local/bin'))
    path1 = [path1 ':/usr/local/bin'];
end
setenv('PATH', path1);

% this code determines if this function is being called
calling_func = dbstack;
being_published = 0;
if ~isempty(calling_func)
	if find(strcmp('publish',{calling_func.name}))
		being_published = 1;
		unix(['tag -a publish-failed ',which(mfilename)]);
		unix(['tag -r published ',which(mfilename)]);
	end
end
tic

%% Example Visuals
% In the following figure, we show some example pictures of the antenna in the fluorescence channel. The image is generated by projecting the standard deviation across time for each pixel, and clearly shows the sensilla, and some that respond to the odour. 
%
% <</Users/sigbhu/code/da/images/calcium-imaging.png>>
%

%% Odour-induced intracellular Calcium in ORNs
% In this document, we attempt to measure intracellular calcium levels using GCamp6, which is expressed in ab3A ORNs using the UAS-GAL4system. (We record from w;22a-GAL4/+;UAS-GCamp6/+) flies. GCamp6f has a peak time (0-peak) of ~50ms, and a decay time (1/2 time) of ~200ms. 

%% Calcium Concentration with Mean Stimulus
% First, we attempt to see if intracellular calcium levels (as measured by fold change in the flourescence) correlates with the mean of the stimulus applied. In the following figure, we plot the fold change in the GCamp6 flourescence vs. the mean stimulus applied. Red crosses are from "test" ROIs corresponding to sensilla and black crosses are from "control" ROIs elsewhere in the frame. The time constant for the calcium signal is calculated by fitting a exponential to the rising phase of the calcium signal. 

p = '/local-data/DA-paper/GCamp6/ephys/steps/';
[PID, LPF, fA, paradigm, orn, fly, AllControlParadigms, paradigm_hashes, sequence,calcium_test,calcium_control] = consolidateDataCalcium(p,1);

% thierry'y comment
aasdas = [];


% mark some data as shit
calcium_test(:,nansum(calcium_test) == 0) = NaN;
calcium_control(:,nansum(calcium_control) == 0) = NaN;

% normalise calcium signals by pre-stimulus mean
calcium_test_fold = calcium_test;
calcium_control_fold = calcium_control;
for i = 1:width(PID)
	calcium_control_fold(:,i) = calcium_control_fold(:,i)/mean(calcium_control_fold(1e3:5e3,i));
	calcium_test_fold(:,i) = calcium_test_fold(:,i)/mean(calcium_test_fold(1e3:5e3,i));
end

% fit exponentials to rise phases
all_tau = NaN*paradigm;
for i = 1:width(PID)
	try
		temp = calcium_test_fold(:,i);
		[~,loc] = max(temp);
		temp = temp(5e3+130:loc);
		temp = temp - temp(1);
		temp = temp/max(temp);
		ft=fittype('1- exp(-x./tau)');
		fo = fitoptions(ft);
		fo.Robust = 'on';
		fo.StartPoint = 1e3;
		t = 1:length(temp);
		ff = fit(t(:),temp(:),ft,fo);
		all_tau(i) = ff.tau;
	catch
	end
end

figure('outerposition',[0 0 1500 500],'PaperUnits','points','PaperSize',[1500 500]); hold on
subplot(1,3,1), hold on
plot(mean(PID(6e3:9e3,:)) - mean(PID(1e3:5e3,:)),mean(calcium_test_fold(6e3:9e3,:)),'r+')
plot(mean(PID(6e3:9e3,:)) - mean(PID(1e3:5e3,:)),mean(calcium_control_fold(6e3:9e3,:)),'k+')
xlabel('\Delta PID(V)')
ylabel('GCamp6 flourescence (fold change)')

subplot(1,3,2), hold on
plot(mean(PID(6e3:9e3,:)) - mean(PID(1e3:5e3,:)),mean(calcium_test(1e3:5e3,:)),'r+')
xlabel('\Delta PID(V)')
ylabel('Pre-stimulus flourescence (a.u.)')

subplot(1,3,3), hold on
plot(mean(PID(6e3:9e3,:)) - mean(PID(1e3:5e3,:)),all_tau,'r+')
xlabel('\Delta PID(V)')
ylabel('\tau_{Calcium} (ms)')

prettyFig('fs=20;');

if being_published
	snapnow
	delete(gcf)
end

%% Time scale of Calcium signal from odour flicker experiments
% In this section we analyse a different data set where a fluctuating odour signal is given to the sensilla, and we record the Calcium signal in response to this fluctuation. We filter the raw GCamp6 signals with a high pass filter with a 5-second cutoff. 



% load all the data
p = '/local-data/DA-paper/GCamp6/ephys';
[PID, LFP, fA, paradigm, orn, fly, AllControlParadigms, paradigm_hashes, sequence,calcium_test,calcium_control] = consolidateDataCalcium(p,1);

pulses = isnan(PID(50e3,:));

% calculate fold change
calcium_test_fold = calcium_test;
calcium_control_fold = calcium_control;
for i = 1:length(paradigm)
	calcium_test_fold(:,i) = calcium_test(:,i)/nanmean(calcium_test(1e3:5e3,i));
	calcium_control_fold(:,i) = calcium_control(:,i)/nanmean(calcium_control(1e3:5e3,i));
end

if ~exist('filtered_calcium','var')
	filtered_calcium = calcium_control;
	for i = 1:length(paradigm)
		textbar(i,length(paradigm))
		try
			filtered_calcium(:,i) = bandPass(calcium_test_fold(:,i),5e3,Inf);
		catch
		end
	end
end

a = 20e3; z = 50e3;
[K_Ca,Ca_pred,Ca_gain] = extractFilters(PID,filtered_calcium,'use_cache',true,'a',a,'z',z,'filter_length',1.5e3);

plot_these = (paradigm == 11 | paradigm == 5) & ~pulses;
figure('outerposition',[0 0 1500 600],'PaperUnits','points','PaperSize',[1500 600]); hold on
subplot(2,7,1:5), hold on
temp = PID(:,plot_these);
t = 1e-3*(1:length(temp));
errorShade(t,nanmean(temp,2),sem(temp'),'Color',[0 0 0]);
set(gca,'XLim',[20 40])
ylabel('PID (V)')

subplot(2,7,8:12), hold on
temp = filtered_calcium(:,plot_these);
t = 1e-3*(1:length(temp));
errorShade(t,nanmean(temp,2),sem(temp'),'Color',[0 0 0]);
set(gca,'XLim',[20 40],'YLim',[-.02 .02])
ylabel('\Delta Calcium (a.u.)')
xlabel('Time (s)')

h = subplot(2,7,[6 7 13 14]); hold on
t = 1e-3*(1:length(K_Ca)) - .2;
temp = K_Ca(:,plot_these);
errorShade(t,nanmean(temp,2),sem(temp'));
xlabel('Filter Lag (s)')
ylabel('Filter')
movePlot(h,'right',.05)
prettyFig;

if being_published
	snapnow
	delete(gcf)
end



%% Version Info
% The file that generated this document is called:
disp(mfilename)

%%
% and its md5 hash is:
Opt.Input = 'file';
disp(dataHash(strcat(mfilename,'.m'),Opt))

%%
% This file should be in this commit:
[status,m]=unix('git rev-parse HEAD');
if ~status
	disp(m)
end

t = toc;

%% 
% This document was built in: 
disp(strcat(oval(t,3),' seconds.'))

% tag the file as being published 

if being_published
	unix(['tag -a published ',which(mfilename)]);
	unix(['tag -r publish-failed ',which(mfilename)]);
end
