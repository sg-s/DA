% 
% 
% created by Srinivas Gorur-Shandilya at 2:01 , 18 February 2016. Contact me at http://srinivas.gs/contact/
% 
% This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. 
% To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.

pHeader;

%% Inst. Gain Analysis of Synthetic Data
% In this document we generate synethetic data using a LN model and rigorously test our inst. gain analysis methods on the various stimuli that we have. 

%% LN Model
% This is what the LN model that we will use to generate our synthetic data looks like. Note that the filter is slightly differentiating, and that the nonlinearity is such that its slope increases with the mean stimulus. This will be important later. 

load('/code/da/data/gaussian_stimulus.mat','gaussian_stimulus')

clear p
p.   tau1 = 25;
p.   tau2 = 60;
p.      A = 0.4000;
p.      n = 2;
p. offset = 0.2769;
p. Hill_A = 100;
p.Hill_Kd = 0.5889;
p. Hill_n = 4;

figure('outerposition',[0 0 1000 500],'PaperUnits','points','PaperSize',[1000 500]); hold on
subplot(1,2,1), hold on
[resp,K,shat] = pLNModel(gaussian_stimulus,p);
plot(1e-3*(1:length(K)),K,'k')
xlabel('Filter lag (s)')
ylabel('Filter  (norm)')

subplot(1,2,2), hold on
plot(shat(1:10:end),resp(1:10:end),'k.')
xlabel('Filter Output')
ylabel('LN model output (Hz)')

prettyFig('FixLogX=1;','fs=16;')

if being_published
	snapnow
	delete(gcf)
end

%% Gaussian Stimulus
% First, perform the analysis on Gaussian odor signals. The following figure shows the (real) odour signal and the synthetic ORN response generated by the LN model. 

figure('outerposition',[0 0 1000 800],'PaperUnits','points','PaperSize',[1000 800]); hold on
subplot(2,1,1), hold on
time = 1e-3*(1:length(gaussian_stimulus));
plot(time(1:10:end),gaussian_stimulus(1:10:end),'k')
xlabel('Time (s)')
ylabel('Stimulus (V)')

subplot(2,1,2), hold on
plot(time(1:10:end),resp(1:10:end),'k')
xlabel('Time (s)')
ylabel('ORN Response (Hz)')

prettyFig('FixLogX=1;','fs=16;')

if being_published
	snapnow
	delete(gcf)
end

%%
% Now we back out filters. Since the stimulus is somewhat Gaussian, we expect to back out a filter very close to the original.  

uts = false*(1:length(gaussian_stimulus));
uts(1e4:5e4) = true;
od = ORNData;
od.stimulus = gaussian_stimulus;
od.use_this_segment = uts;
od.firing_rate = resp;
od = backOutFilters(od);

figure('outerposition',[0 0 500 500],'PaperUnits','points','PaperSize',[1000 500]); hold on
plot(1:length(K),K/max(K),'k')
plot((1:length(od.K_firing))-100,od.K_firing/max(od.K_firing),'r')
legend({'Actual Filter','Reconstructed Filter'})
prettyFig('FixLogX=1;','fs=16;')

if being_published
	snapnow
	delete(gcf)
end

%% 
% OK, the filter looks good. Let's look at the full LN model that we can back out of the synthetic data, and also see if we can also back out the nonlinearity. 

plot(od,'LN.firing_rate','data_bin_type','dots')
prettyFig('FixLogX=1;','fs=16;')

if being_published
	snapnow
	delete(gcf)
end

%%
% Now, we begin to test the validity of our methods. We will perform the inst. gain analysis against the linear projection. In the following figure, we plot the distribution of the inst. gain (computed on 50ms bins), and an example plot showing how the inst. gain varies with the mean stimulus in the preceding 200ms. Finally, we summarise plots like this by computing the Spearman correlation as a function of the history length. 

od = computeInstGain(od);
figure('outerposition',[0 0 1500 500],'PaperUnits','points','PaperSize',[1500 500]); hold on
ax(1) = subplot(1,3,1); hold on
ax(2) = subplot(1,3,2); hold on
ax(3) = subplot(1,3,3); hold on

plot(od,ax(1),'pdf.inst_gain_firing');
plot(od,ax(2:3),'instGainAnalysis.firing_rate.mu','data_bin_type','dots','history_length',200);
title(ax(2),'200ms window')
prettyFig('FixLogX=1;','fs=16;')

if being_published
	snapnow
	delete(gcf)
end

%%
% This is weird. First, the Spearman correlation is not negative. Second, it gets further away from zero as we move to shorted history lengths. What's going on? Remembering that our nonlinearity was such that it was shallower at lower stimuli, we hypothesize that what we see here is because of the static nonlinearity. 

%%
% Now, we repeat the inst. gain analysis, but taking into account the non-linearity.

od = computeInstGain(od,true);
figure('outerposition',[0 0 1000 500],'PaperUnits','points','PaperSize',[1000 500]); hold on
ax(1) = subplot(1,2,1); hold on
ax(2) = subplot(1,2,2); hold on

plot(od,ax,'instGainAnalysis.firing_rate.mu','data_bin_type','dots');
title(ax(1),'200ms')
prettyFig('FixLogX=1;','fs=16;')

if being_published
	snapnow
	delete(gcf)
end

%%
% The curve is now flat! So we have shown that what we saw previously could be accounted for by a nonlinearity. The shape of the nonlinearity (steeper at low values or shallower at low values) determines if the Spearman plot goes to negative or positive values. 

%% Version Info
pFooter;