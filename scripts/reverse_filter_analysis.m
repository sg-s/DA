

pHeader;

%% Reverse Filter analysis
% In this document, I assume NL-type models underlie data that we have, and attempt to a) recover this input nonlinearity non-parametrically and b) check if this input nonlinearity changes with stimulus condition or time. The way I do this is to first extract a filter from the response to the stimulus (a-causally), and then to plot the stimulus vs. projected response. 

%% Validation with synthetic data: naturalistic stimuli
% First, I validate this analysis method using synthetic data from a DA model. In the following figure, I use two different DA models run on the sparse naturalistic stimulus in Fig 2 of the paper. They are identical except that in one case, I turn off gain control (by setting $\beta$ to 0). The filters of the DA model used to generate responses are shown in (a). I then reconstruct filters from the responses generated by these two models to the stimulus. These filters are shown in (b). Now, I plot the convolution of these filters with the response vs. the stimulus in the two cases, when gain control is on (c) and off (d). Note that I can estimate the input stimulus much better when gain control is off (d) than when gain control is on (c). In (c-d), I colour each point by the mean stimulus in the preceding 300ms. Note that the reason the r-squared is lower in the "gain on" case could be either due to 1) fast gain control or due to 2) the effective divisive nonlinearity in the DA model. 


% get the first nat. stim
load(getPath(dataManager,'5c7dacc5b42ff0eebb980d80fec120c3'),'data')
PID = data(2).PID;
PID = PID(:,1:10:end)';
PID = PID - min(min(PID(1:5e3,:)));
S = mean(PID,2);
time = 1e-3*(1:length(S));

% fit a DA model to this
clear p
p.   s0 = 0;
p.  n_z = 2;
p.tau_z = 147.3750;
p.  n_y = 2;
p.tau_y = 27.2500;
p.    C = 0.5000;
p.    A = 170.4375;
p.    B = 2.7656;

[R0,~,~,Ky,Kz] = DAModelv2(S,p);

% now generate another set of responses with the dynamical adaptation turned off
p.B = 0;
R1 = DAModelv2(S,p);

% treat t the stimulus and the response as each other, and flip time

K0 = fitFilter2Data(R0,S,'reg',1,'filter_length',1e3,'offset',600);
filtertime = 1e-3*(1:length(K0)) - .6;
S0 = convolve(time,R0,K0,filtertime)/max(R0);

K1 = fitFilter2Data(R1,S,'reg',1,'filter_length',1e3,'offset',600);
S1 = convolve(time,R1,K1,filtertime)/max(R1);

history_length = 300;

figure('outerposition',[0 0 801 902],'PaperUnits','points','PaperSize',[801 902]); hold on
subplot(2,2,1); hold on
plot(Ky*1e3)
plot(Kz*1e3)
legend({'K_y','K_z'})
xlabel('Filter lag (ms)')
ylabel('Filter amplitude (a.u.)')
title('DA Model parameters')

subplot(2,2,2); hold on
plot(filtertime,K0,'r')
plot(filtertime,K1,'b')
xlabel('Lag (s)')
ylabel('Filter amplitude (a.u.)')
title('Reconstructed filters (R \rightarrow S)')
legend({'Gain control ON','Gain control OFF'},'Location','northwest')
set(gca,'XLim',[-.6 .2])

subplot(2,2,3); hold on
shat = computeSmoothedStimulus(S,history_length);
shat = shat-min(shat);
shat = shat/max(shat);
shat = 1+ceil(shat*99);
shat(isnan(shat)) = 1;
cc = parula(100);
c = cc(shat,:);
scatter(S,S0,20,c,'filled')
title('Gain control ON')
set(gca,'XScale','log')
legend(['r^2 = ' oval(rsquare(S,S0))],'Location','northwest')
set(gca,'XTick',[1e-2 1e-1 1 10],'XLim',[1e-3 10])
xlabel('Stimulus (V)')
ylabel('K \otimes R (norm)')

subplot(2,2,4); hold on
shat = computeSmoothedStimulus(S,history_length);
shat = shat-min(shat);
shat = shat/max(shat);
shat = 1+ceil(shat*99);
shat(isnan(shat)) = 1;
cc = parula(100);
c = cc(shat,:);
scatter(S,S1,20,c,'filled')
title('Gain control OFF')
set(gca,'XScale','log')
legend(['r^2 = ' oval(rsquare(S,S1))],'Location','northwest')
set(gca,'XTick',[1e-2 1e-1 1 10],'XLim',[1e-3 10])
xlabel('Stimulus (V)')
ylabel('K \otimes R (norm)')

prettyFig()

labelFigure

if being_published	
	snapnow	
	delete(gcf)
end


%% Version Info
%
pFooter;


