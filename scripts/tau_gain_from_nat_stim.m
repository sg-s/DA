


pHeader;

%% Estimating the timescale of gain control from naturalistic stimuli
% In this document, I attempt to estimate the gain control timescale from naturalistic stimuli, where brief whiff of odorant are presented to neurons, with widely varying amplitudes, some in isolation, and some in dense whiffs where other whiffs precede them. 

%% Background
% I attempted to this previously by looking at how deviations from a linear model varied with the mean stimulus in some preceding window. However, there was a fatal flaw in this analysis: these deviations could be largely accounted for by an input nonlinearity, that correlations in the stimulus could then manifest as "dynamic" gain control. 

%%
% In this document, I work around this problem by first fitting, explicitly, a nonlinear-linear model to the data. These models reproduce the data very well (with a very high $r^2$). Now that I have accounted for the input nonlinearity, I study how deviations of the neuron response from this NLN model correlate with the mean stimulus in some preceding window. 

   ;;;    ;;;;;;;;   ;;;;;;;     ;;;    
  ;; ;;   ;;     ;; ;;     ;;   ;; ;;   
 ;;   ;;  ;;     ;;        ;;  ;;   ;;  
;;     ;; ;;;;;;;;   ;;;;;;;  ;;     ;; 
;;;;;;;;; ;;     ;; ;;        ;;;;;;;;; 
;;     ;; ;;     ;; ;;        ;;     ;; 
;;     ;; ;;;;;;;;  ;;;;;;;;; ;;     ;; 

 ;;;;;;;          ;;;;;;;;  ;;     ;; ;;;;;;;;    ;;;    ;;    ;;  ;;;;;;;  ;;    ;; ;;;;;;;; 
;;     ;;         ;;     ;; ;;     ;;    ;;      ;; ;;   ;;;   ;; ;;     ;; ;;;   ;; ;;       
       ;;         ;;     ;; ;;     ;;    ;;     ;;   ;;  ;;;;  ;; ;;     ;; ;;;;  ;; ;;       
 ;;;;;;;  ;;;;;;; ;;;;;;;;  ;;     ;;    ;;    ;;     ;; ;; ;; ;; ;;     ;; ;; ;; ;; ;;;;;;   
;;                ;;     ;; ;;     ;;    ;;    ;;;;;;;;; ;;  ;;;; ;;     ;; ;;  ;;;; ;;       
;;                ;;     ;; ;;     ;;    ;;    ;;     ;; ;;   ;;; ;;     ;; ;;   ;;; ;;       
;;;;;;;;;         ;;;;;;;;   ;;;;;;;     ;;    ;;     ;; ;;    ;;  ;;;;;;;  ;;    ;; ;;;;;;;; 


%% ab2A and 2-butanone
% The first dataset I will try this on is with ab2A and 2-butanone. The data we have here is very broadly distributed, as we have the same naturalistic stimulus at three different scales. 



%% 
% Can we see if there is any gain control in this data? In the following figure, I first fit NLN-models neuron-by-neuron to the data. The NLN models have only two parameters (the $k_D$ and the $n$) that are fit parametrically. Other parameters (like the filter) are fit non-parametrically. In the following figure, I plot the results of each neuron in a separate colour. The first plot shows the distribution of the deviations of the NLN model predictions from the measured response. The second plot shows the Spearman correlation between the deviations and the mean stimulus in some preceding window, as a function of window length. Note that these plots tend to have a minimum at some defined timescale. The dotted and dashed lines indicate the autocorrelation times for the stimulus and the response respectively. 


% get all data 
cdata = consolidateData2(getPath(dataManager,'4608c42b12191b383c84fea52392ea97'));
[~, data] =  assembleScaledNatStim(cdata);


clear p

p(1).k_D = .6578;
p(1).n = .7188;

p(2).  k_D = 0.1109;
p(2).    n = .9688;

p(3).k_D = .1187;
p(3).n = .7812;

% generate responses using this model 
warning off
for i = 1:length(data)
	for j = 1:size(data(i).X,2)
		try
			data(i).P(:,j) = NLNmodel([data(i).S(:,j) - min(data(i).S(:,j)) data(i).R(:,j)] ,p(i));
		catch
		end
	end
end
warning on

figure('outerposition',[0 0 1220 601],'PaperUnits','points','PaperSize',[1220 601]); hold on
clear ax
ax(2) = subplot(1,2,1); hold on
ax(4) = subplot(1,2,2); hold on

c = lines(3);

for i = 1:3
	plot_tau_gain_nat_stim(data(i),ax,'c',c(i,:),'response_cutoff',30);
end

prettyFig();
suptitle('ab2A -- 2-butanone')

if being_published
	snapnow
	delete(gcf)
end


%%
% It looks like there is gain control that is not being captured by the NLN model on a timescale of a few seconds. Is this actually true? I need to validate this analysis method to ensure that what we see isn't the result of fitting a model to data that is actually generated by a qualitatively different model. 

%%
% The first order of business is to check if we really need to use Spearman correlations. Can we use simple Pearson correlations? In the following figure, I repeat the same analysis, but using Pearson correlations. 

figure('outerposition',[0 0 1220 601],'PaperUnits','points','PaperSize',[1220 601]); hold on
clear ax
ax(2) = subplot(1,2,1); hold on
ax(4) = subplot(1,2,2); hold on

c = lines(3);

for i = 1:3
	plot_tau_gain_nat_stim(data(i),ax,'c',c(i,:),'method','Pearson');
end

prettyFig();
suptitle('ab2A -- 2-butanone')

if being_published
	snapnow
	delete(gcf)
end


%%
% This doesn't look so different, so that's good. 

%% Validation: response cutoff
% In this analysis, I only analyse the responses to whiffs, and neglect deviations from model fit when there is no stimulus. The reason is because when there is no stimulus, the baseline firing of the neuron deviates randomly from the model responses, which are not very meaningful. However, does this cutoff affect this analysis? To determine this, I generate synthetic responses using a NLN model, and then fit a NLN model back to this, and repeat this analysis with different cutoffs. 

% get the real filter
[~,K] = NLNmodel([data(3).S(:,2) - min(data(3).S(:,2)) data(3).R(:,2)] ,p(3));
filtertime = (1:length(K)) - 51;

clear q
q.n = .7812;
q.k_D = .1187;

% generate synthetic data
clear syn_data
S = data(3).S(:,2);
time = 1:length(S);
a = 1./(1+(q.k_D./S).^q.n);
R = convolve(time,a,K,filtertime);
R(R<0) = 0;
R = R*100;
syn_data.S = S;
syn_data.R = R;
% make predictions
syn_data.P = NLNmodel([S R],q);

figure('outerposition',[0 0 1501 555],'PaperUnits','points','PaperSize',[1501 555]); hold on
clear ax
ax(2) = subplot(1,3,1); hold on; axis square
ax(4) = subplot(1,3,2); hold on; axis square
clear ax2
ax2(4) = subplot(1,3,3); hold on; axis square

all_cutoffs = [0 5 10 20];
c = parula(length(all_cutoffs)+1);
for i = 1:length(all_cutoffs)
	plot_tau_gain_nat_stim(syn_data,ax,'c',c(i,:),'response_cutoff',all_cutoffs(i),'method','Spearman');
	plot_tau_gain_nat_stim(syn_data,ax2,'c',c(i,:),'response_cutoff',all_cutoffs(i),'method','Pearson');
end
suptitle('synthetic data: effect of response cutoff ')


set(ax(4),'YLim',[-1 1])
set(ax2(4),'YLim',[-1 1])

l = flipud(ax(2).Children); clear L
for i = 1:length(l)
	L{i} = ['R>' oval(all_cutoffs(i))];
end
legend(l,L);
prettyFig();

if being_published
	snapnow
	delete(gcf)
end

%%
% Varying the response cutoff seems to do all sorts of stuff to these plots. Most importantly, it varies the instantaneous correlation. So perhaps we should set the response cutoff so that the instantaneous correlation is zero? That's one thought. While it is troubling that there seems to be some structure in the correlation vs. timescale plots, note that the deviations from the model are tiny, and all these correlations arise from tiny mismatches. 

%%
% Perhaps a way to combine the effect of the correlation of the deviations and the scale of the deviations would be to measure the slope of the plot of deviations vs. mean stimulus in the preceding window. 


figure('outerposition',[0 0 1000 901],'PaperUnits','points','PaperSize',[1000 901]); hold on

clear ax
ax(2) = subplot(2,2,1); hold on
ax(4) = subplot(2,2,2); hold on

all_cutoffs = [0 5 10 20];
c = parula(length(all_cutoffs)+1);

for i = 1:length(all_cutoffs)
	plot_tau_gain_nat_stim(data(3),ax,'c',c(i,:),'method','slope','response_cutoff',all_cutoffs(i));
end

set(ax(4),'YLim',[-500 200])
title(ax(4),'Real data')
title(ax(2),'Real data')

% now do the fit

clear ax
ax(2) = subplot(2,2,3); hold on; axis square
ax(4) = subplot(2,2,4); hold on; axis square

for i = 1:length(all_cutoffs)
	plot_tau_gain_nat_stim(syn_data,ax,'c',c(i,:),'response_cutoff',all_cutoffs(i),'method','slope');
end

set(ax(4),'YLim',[-500 200])
title(ax(4),'synthetic data')
title(ax(2),'synthetic data')

l = flipud(ax(2).Children); clear L
for i = 1:length(l)
	L{i} = ['R>' oval(all_cutoffs(i))];
end
legend(l,L);
prettyFig();

if being_published
	snapnow
	delete(gcf)
end

%%
% As suspected, the synthetic data shows much smaller apparent gain changes compared to the real data. So that's something to keep in mind -- not only do the absolute values of the correlation matter, but also the scale of the deviations. 


%% Validation: input nonlinearity 
% In this section, I generate synthetic data using a model where the input nonlinearity does not go to 0 or 1 at its extremities. 


all_min_a = [0 .1 .2 .3];
all_max_a = [1 .9 .8 .5];

clear q
q.n = .7812;
q.k_D = .1187;

% generate synthetic data
clear syn_data
for i = 1:length(all_max_a)
	S = data(3).S(:,2);
	a = 1./(1+(q.k_D./S).^q.n);
	a = a*(all_max_a(i) - all_min_a(i)) + all_min_a(i);
	time = 1:length(S);
	R = convolve(time,a,K,filtertime);
	R(R<0) = 0;
	R = R*100;
	syn_data(i).S = S;
	syn_data(i).R = R;
	% make predictions
	syn_data(i).P = NLNmodel([S R],q);
end


c = lines(length(syn_data));

figure('outerposition',[0 0 1501 533],'PaperUnits','points','PaperSize',[1501 533]); hold on
subplot(1,3,1); hold on
for i = 1:length(all_min_a)
	x = logspace(-4,2,100);
	a = 1./(1+(q.k_D./x).^q.n);
	a = a*(all_max_a(i) - all_min_a(i)) + all_min_a(i);
	plot(x,a,'Color',c(i,:))
end
xlabel('Stimulus (V)')
ylabel('a')
title('Synthetic input nonlinearities')
set(gca,'XScale','log')
axis square

clear ax
ax(2) = subplot(1,3,2); hold on; axis square
ax(4) = subplot(1,3,3); hold on; axis square


for i = 1:length(syn_data)
	rc = findResponseCutoffTauGainPlot(syn_data(i).S,syn_data(i).R,syn_data(i).P,'true');
	plot_tau_gain_nat_stim(syn_data(i),ax,'c',c(i,:),'response_cutoff',rc);
end
suptitle('synthetic data: effect of input nonlinearity mismatch')
set(ax(4),'YLim',[-1 1])
prettyFig();

if being_published
	snapnow
	delete(gcf)
end

%%
% Now I choose a qualitatively different input nonlinearity -- a log function, and repeat the analysis to see if the timescale we saw in the data pops back up. 

a = log(S);
a = a - min(a); a = a/max(a);
R = convolve(time,a,K,filtertime);
R(R<0) = 0;
R = R*100;

clear syn_data
syn_data.S = S;
syn_data.R = R;

% find best foit model params
clear p
p.n = 0.53;
p.k_D = .0313;

% make predictions
syn_data.P = NLNmodel([S R],p);


figure('outerposition',[0 0 1501 533],'PaperUnits','points','PaperSize',[1501 533]); hold on
subplot(1,3,1); hold on
x = logspace(-4,2,100);
a = log(x);
a = a - min(a); a = a/max(a);
plot(x,a,'k');
a = 1./(1 + (p.k_D./x).^p.n);
plot(x,a,'r')

xlabel('Stimulus (V)')
ylabel('a')
title('Synthetic input nonlinearities: a log')
set(gca,'XScale','log')
axis square

clear ax
ax(2) = subplot(1,3,2); hold on; axis square
ax(4) = subplot(1,3,3); hold on; axis square

rc = findResponseCutoffTauGainPlot(syn_data.S,syn_data.R,syn_data.P,'true');
plot_tau_gain_nat_stim(syn_data,ax,'c',[0 0 0],'response_cutoff',rc,'method','Spearman');

suptitle('synthetic data')
set(ax(4),'YLim',[-1 1])
prettyFig();

if being_published
	snapnow
	delete(gcf)
end

%% Validation: effect of stimulus correlation time
% Do correlations in th stimulus manifest in weird ways and cause us to think that there is gain control when there isn't? To check this, I rescale the stimulus in the time axis and re-do the analysis to see how stimulus correlations can screw with this method. 

% generate data

clear p
p.k_D = .1187;
p.n = .7812;

stim_scale = [.2 .5 1 2 5];

clear syn_data
for i = 1:length(stim_scale)
	fake_time = linspace(0,max(time),stim_scale(i)*length(time));
	Si  = vectorise(interp1(time,S,fake_time));

	% generate responses using real model
	a = 1./(1 + (p.k_D./Si).^p.n);
	R = convolve(1:length(Si),a,K,filtertime);
	R(R<0) = 0;
	R = R*100;

	% remove nans
	rm_this = isnan(R) | isnan(Si);

	syn_data(i).R = R(~rm_this);
	syn_data(i).S = Si(~rm_this);

	% make prediction
	syn_data(i).P = NLNmodel([ Si(~rm_this) R(~rm_this)],p);
end

c = lines(length(syn_data));

figure('outerposition',[0 0 1501 533],'PaperUnits','points','PaperSize',[1501 533]); hold on
subplot(1,3,1); hold on
for i = 1:length(syn_data)
	[a,lags] = autocorr(syn_data(i).S,length(syn_data(i).S)-1);
	plot(lags,a,'Color',c(i,:))
end
set(gca,'XScale','log')
xlabel('lag (ms)')
ylabel('Autocorrelation')

clear ax
ax(2) = subplot(1,3,2); hold on; axis square
ax(4) = subplot(1,3,3); hold on; axis square


for i = 1:length(syn_data)
	plot_tau_gain_nat_stim(syn_data(i),ax,'c',c(i,:),'response_cutoff',10);
end
suptitle('synthetic data: effect of changing stimulus correlations')
set(ax(4),'YLim',[-1 1])

prettyFig();

if being_published
	snapnow
	delete(gcf)
end


%% Validation: DA model
% In this section, I use a DA model to generate some response to this stimulus

clear p_DA
p_DA.   s0 = -4.8828e-04;
p_DA.  n_z = 3.7656;
p_DA.tau_z = 20;
p_DA.  n_y = 7.7500;
p_DA.tau_y = 8.2031;
p_DA.    C = 0;
p_DA.    A = 2.9926e+03;
p_DA.    B = 14.6875;

all_tau_z = [20 80 160 320 640];

clear syn_data p
load('.cache/NLN_fits_to_DA.mat','p')

for i = 1:length(all_tau_z)
	p_DA.tau_z = all_tau_z(i);
	R = DAModelv2(S,p_DA);
	R = R*(std(data(3).R(:,2))/std(R));
	syn_data(i).R = R;
	syn_data(i).S = S;
	% generate responses
	syn_data(i).P = NLNmodel([S R],p(i));
end

%

figure('outerposition',[0 0 1501 533],'PaperUnits','points','PaperSize',[1501 533]); hold on


clear ax
ax(2) = subplot(1,3,2); hold on; axis square
ax(4) = subplot(1,3,3); hold on; axis square


for i = 1:length(syn_data)
	plot_tau_gain_nat_stim(syn_data(i),ax,'c',c(i,:),'response_cutoff',50,'method','Spearman');
	plot([all_tau_z(i) all_tau_z(i)]*p_DA.n_z,[-1 1],'LineWidth',2,'Color',c(i,:))
end


suptitle('recovering \tau_{gain} in a DA model')

set(ax(4),'YLim',[-1 1])

prettyFig();





%% 
% Does an adapting NLN model also have this property? If gain control is on the timescale I identified earlier, does it fit better?

this_orn = 2;
clear fd
for i = 1:size(data(this_orn).X,2)
	S = data(this_orn).S(:,i); S = S - min(S);
	R = data(this_orn).R(:,i);
	fd(i).stimulus = S;
	fd(i).response = R;
	fd(i).response(1:5e3) = NaN;
end

clear p
       k0: 0.0451
    tau_z: 2424
        B: 0.6250
      n_z: 0.1016
        n: 0.9812
     tau1: 41.2812
     tau2: 45.7812
      n_y: 1.3984
        A: 0.9340
        C: 2.7945e+03

p(3).n_z = 5.7220e-07
p(3). k0 = 0.0556
p(3).tau = 2.0728e+03
p(3).  B = 3.2410e-04
p(3).  n = 0.9878


for j = 2
	S = [data(this_orn).S(:,j) - min(data(this_orn).S(:,j)) data(this_orn).R(:,j)];
	data(this_orn).P(:,j) = aNLNmodel(S ,p);
end

figure('outerposition',[0 0 1220 601],'PaperUnits','points','PaperSize',[1220 601]); hold on
clear ax
ax(2) = subplot(1,2,1); hold on
ax(4) = subplot(1,2,2); hold on

c = lines(3);

for i = this_orn
	plot_tau_gain_nat_stim(data(i),ax,c(i,:),30);
end

prettyFig();

if being_published
	snapnow
	delete(gcf)
end



   ;;;    ;;;;;;;;   ;;;;;;;     ;;;    
  ;; ;;   ;;     ;; ;;     ;;   ;; ;;   
 ;;   ;;  ;;     ;;        ;;  ;;   ;;  
;;     ;; ;;;;;;;;   ;;;;;;;  ;;     ;; 
;;;;;;;;; ;;     ;;        ;; ;;;;;;;;; 
;;     ;; ;;     ;; ;;     ;; ;;     ;; 
;;     ;; ;;;;;;;;   ;;;;;;;  ;;     ;; 


 ;;;;;;;          ;;;;;;;;  ;;     ;; ;;;;;;;;    ;;;    ;;    ;;  ;;;;;;;  ;;    ;; ;;;;;;;; 
;;     ;;         ;;     ;; ;;     ;;    ;;      ;; ;;   ;;;   ;; ;;     ;; ;;;   ;; ;;       
       ;;         ;;     ;; ;;     ;;    ;;     ;;   ;;  ;;;;  ;; ;;     ;; ;;;;  ;; ;;       
 ;;;;;;;  ;;;;;;; ;;;;;;;;  ;;     ;;    ;;    ;;     ;; ;; ;; ;; ;;     ;; ;; ;; ;; ;;;;;;   
;;                ;;     ;; ;;     ;;    ;;    ;;;;;;;;; ;;  ;;;; ;;     ;; ;;  ;;;; ;;       
;;                ;;     ;; ;;     ;;    ;;    ;;     ;; ;;   ;;; ;;     ;; ;;   ;;; ;;       
;;;;;;;;;         ;;;;;;;;   ;;;;;;;     ;;    ;;     ;; ;;    ;;  ;;;;;;;  ;;    ;; ;;;;;;;; 


%% ab3A and 2-butanone.
% I repeat the same analysis for ab3A and 2-butanone. Since I only have only neuron here, I also plot some extra things like a comparison of the response to the prediction, and a plot of the deviations vs. the mean stimulus in the preceding window.  

% get all data 
cdata = consolidateData2(getPath(dataManager,'c2bce18a6b0a7e89e9c6832dcc27e39b'));
[~, data] =  assembleScaledNatStim(cdata);



clear p
 p.k_D = 3.5894;
 p.  n = 0.5625;


% generate responses using this model 
clear K
for j = 1:size(data.X,2)
	data.P(:,j) = NLNmodel([data.S(:,j) - min(data.S(:,j)) data.R(:,j)] ,p);
end

figure('outerposition',[0 0 1000 901],'PaperUnits','points','PaperSize',[1000 901]); hold on
clear ax
for i = 1:4
	ax(i) = subplot(2,2,i); hold on
end

plot_tau_gain_nat_stim(data,ax);

prettyFig();
suptitle('ab3A -- 2-butanone')

if being_published
	snapnow
	delete(gcf)
end




   ;;;    ;;;;;;;;   ;;;;;;;     ;;;        ;;;;;;;     ;;;     ;;;;;;  
  ;; ;;   ;;     ;; ;;     ;;   ;; ;;      ;;     ;;   ;; ;;   ;;    ;; 
 ;;   ;;  ;;     ;;        ;;  ;;   ;;            ;;  ;;   ;;  ;;       
;;     ;; ;;;;;;;;   ;;;;;;;  ;;     ;;     ;;;;;;;  ;;     ;; ;;       
;;;;;;;;; ;;     ;;        ;; ;;;;;;;;;    ;;        ;;;;;;;;; ;;       
;;     ;; ;;     ;; ;;     ;; ;;     ;;    ;;        ;;     ;; ;;    ;; 
;;     ;; ;;;;;;;;   ;;;;;;;  ;;     ;;    ;;;;;;;;; ;;     ;;  ;;;;;;  

%% ab3A and ethyl acetate
% In this section, I repeat the analysis but with ethyl acetate naturalistic stimulus applied to ab3A neurons. 

% load the data
cdata = consolidateKontrollerData(getPath(dataManager,'f70e37a7db469b88c0fc79ff5e828e9d'));
v2struct(cdata); clear cdata

clear data
for i = 1:max(orn)
	R = fA(:,orn==i);
	S = PID(:,orn==i);	
	rm_this = sum(R)==0;
	data(i).S = nanmean(S(:,~rm_this),2);
	data(i).S = data(i).S - min(data(i).S);
	data(i).R = nanmean(R(:,~rm_this),2);
end

% fit a NLN model to this
% for i = 1:length(data)
% 	fd(i).stimulus = [data(i).S data(i).R];
% 	fd(i).response = data(i).R;
% end

% for i = 1:length(fd)
% 	p(i) = fitModel2Data(@NLNmodel,fd(i),'p0',p(i),'nsteps',10);
% end

load('.cache/NLN_model_fit_to_ab3A_2ac_nat_stim.mat','p')

% use these parameters to make NLN model predictions
for i = 1:max(orn)
	data(i).P = NLNmodel([data(i).S data(i).R] ,p(i));
end

figure('outerposition',[0 0 1201 600],'PaperUnits','points','PaperSize',[1201 600]); hold on
clear ax
ax(4) = subplot(1,2,2); hold on
ax(2) = subplot(1,2,1); hold on

c = lines(length(data));

for i = [1 2 4 5 6]
	plot_tau_gain_nat_stim(data(i),ax,c(i,:));
end

prettyFig();
suptitle('ab3A -- ethyl acetate')

if being_published
	snapnow
	delete(gcf)
end



%% Version Info
%
pFooter;


